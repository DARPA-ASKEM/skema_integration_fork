# coding: utf-8

# flake8: noqa
"""
    SKEMA Common Abstract Syntax Tree (CAST)

    This document outlines the structure of the CAST that will be used as a generic representation of the semantics of a program written in any language. This will be used when creating functions networks from programs using the SKEMA Program Analysis pipeline.   __Generating Class Structure__    To automatically generate Python or Java models corresponding to this document, you can use [swagger-codegen](https://swagger.io/tools/swagger-codegen/). We can use this to generate client code based off of this spec that will also generate the class structure.    1. Install via the method described for your operating system [here](https://github.com/swagger-api/swagger-codegen#Prerequisites). Make sure to install a version after 3.0 that will support openapi 3.  2. Run swagger-codegen with the options in the example below. The URL references where the yaml for this documentation is stored on github. Make sure to replace CURRENT_VERSION with the correct version. To generate Java classes rather, change the `-l python` to `-l java`. Change the value to the `-o` option to the desired output location.       ```      swagger-codegen generate -l python -o ./client -i https://raw.githubusercontent.com/ml4ai/automates-v2/master/docs/source/cast_v{CURRENT_VERSION}.yaml      ```  3. Once it executes, the client code will be generated at your specified location. For python, the classes will be located in `$OUTPUT_PATH/swagger_client/models/`. For java, they will be located in `$OUTPUT_PATH/src/main/java/io/swagger/client/model/`      # noqa: E501

    OpenAPI spec version: 1.2.2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

# import models into model package
from .assignment import Assignment
from .ast_node import AstNode
from .attribute import Attribute
from .binary_op import BinaryOp
from .binary_operator import BinaryOperator
from .boolean import Boolean
from .call import Call
from .dict import Dict
from .expr import Expr
from .function_def import FunctionDef
from .list import List
from .literal_value import LiteralValue
from .loop import Loop
from .model_break import ModelBreak
from .model_continue import ModelContinue
from .model_if import ModelIf
from .model_import import ModelImport
from .model_return import ModelReturn
from .module import Module
from .name import Name
from .number import Number
from .record_def import RecordDef
from .scalar_type import ScalarType
from .set import Set
from .source_code_data_type import SourceCodeDataType
from .source_ref import SourceRef
from .string import String
from .structure_type import StructureType
from .subscript import Subscript
from .tuple import Tuple
from .unary_op import UnaryOp
from .unary_operator import UnaryOperator
from .value_constructor import ValueConstructor
from .var import Var
from .var_type import VarType
